class AnimalChess {
    constructor() {
        // C√°c ph·∫ßn t·ª≠ DOM
        this.board = null;
        this.cells = [];
        this.pieces = [];
        this.selectedPiece = null;
        this.possibleMoves = [];
        this.currentPlayer = 'red'; // 'red' ho·∫∑c 'blue'
        this.gameActive = true;
        this.statusElement = null;
        this.isBoardFlipped = false;
        
        // ƒê∆∞·ªùng d·∫´n ƒë·∫øn h√¨nh ·∫£nh
        this.imagePath = './images/animal-chess/';
        
        // T√™n c√°c con th√∫
        this.animalNames = {
            'E': 'Voi',    // Elephant
            'L': 'S∆∞ t·ª≠',  // Lion
            'T': 'C·ªçp',    // Tiger
            'P': 'B√°o',    // Panther
            'D': 'Ch√≥',    // Dog
            'W': 'S√≥i',    // Wolf
            'C': 'M√®o',    // Cat
            'R': 'Chu·ªôt'   // Rat
        };
        
        // Bi·ªÉu t∆∞·ª£ng con th√∫
        this.animalIcons = {
            'E': 'üêò',  // Voi
            'L': 'ü¶Å',  // S∆∞ t·ª≠
            'T': 'üêØ',  // C·ªçp
            'P': 'üêÜ',  // B√°o
            'D': 'üêï',  // Ch√≥
            'W': 'üê∫',  // S√≥i
            'C': 'üê±',  // M√®o
            'R': 'üê≠'   // Chu·ªôt
        };
        
        // Th·ª© b·∫≠c s·ª©c m·∫°nh (cao -> th·∫•p)
        this.animalRanks = {
            'E': 7,
            'L': 6,
            'T': 5,
            'P': 4,
            'D': 3,
            'W': 2,
            'C': 1,
            'R': 0
        };
    }
    
    // Kh·ªüi t·∫°o b√†n c·ªù
    initBoard(containerId) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        // T·∫°o status hi·ªÉn th·ªã l∆∞·ª£t ch∆°i
        this.statusElement = document.createElement('div');
        this.statusElement.className = 'animal-chess-status';
        this.statusElement.textContent = 'L∆∞·ª£t c·ªßa ƒê·ªè';
        container.appendChild(this.statusElement);
        
        // T·∫°o b√†n c·ªù
        this.board = document.createElement('div');
        this.board.className = 'animal-chess-board';
        container.appendChild(this.board);
        
        // T·∫°o c√°c √¥ c·ªù 7x9
        for (let row = 0; row < 9; row++) {
            for (let col = 0; col < 7; col++) {
                const cell = document.createElement('div');
                cell.className = 'animal-chess-cell';
                cell.dataset.row = row;
                cell.dataset.col = col;
                
                // X√°c ƒë·ªãnh lo·∫°i √¥ ƒë·∫∑c bi·ªát
                if (this.isDen(row, col)) {
                    cell.classList.add('den');
                    
                    const denLabel = document.createElement('div');
                    denLabel.className = 'den-label';
                    denLabel.textContent = row === 0 ? 'Hang Xanh' : 'Hang ƒê·ªè';
                    cell.appendChild(denLabel);
                } else if (this.isWater(row, col)) {
                    cell.classList.add('water');
                } else if (this.isTrap(row, col)) {
                    cell.classList.add('trap');
                    cell.dataset.owner = this.getTrapOwner(row, col);
                }
                
                cell.addEventListener('click', (e) => this.handleCellClick(e));
                this.board.appendChild(cell);
                this.cells.push(cell);
            }
        }
        
        // T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn
        const controls = document.createElement('div');
        controls.className = 'animal-chess-controls';
        
        const resetButton = document.createElement('button');
        resetButton.className = 'animal-chess-button reset-button';
        resetButton.textContent = 'Ch∆°i l·∫°i';
        resetButton.addEventListener('click', () => this.resetGame());
        controls.appendChild(resetButton);
        
        const flipButton = document.createElement('button');
        flipButton.className = 'animal-chess-button flip-button';
        flipButton.textContent = 'L·∫≠t b√†n c·ªù';
        flipButton.addEventListener('click', () => this.flipBoard());
        controls.appendChild(flipButton);
        
        const backButton = document.createElement('button');
        backButton.className = 'animal-chess-button back-button';
        backButton.textContent = 'Quay l·∫°i';
        backButton.addEventListener('click', () => this.backToSelection());
        controls.appendChild(backButton);
        
        container.appendChild(controls);
        
        // Kh·ªüi t·∫°o b√†n c·ªù
        this.initializePieces();
    }
    
    // Kh·ªüi t·∫°o qu√¢n c·ªù
    initializePieces() {
        // X√≥a qu√¢n c·ªù c≈© n·∫øu c√≥
        this.pieces = [];
        
        // Kh·ªüi t·∫°o v·ªã tr√≠ ban ƒë·∫ßu c·ªßa qu√¢n c·ªù
        const initialSetup = [
            // Qu√¢n xanh (player 2)
            { animal: 'L', row: 0, col: 0, player: 'blue', power: 7 }, // S∆∞ t·ª≠
            { animal: 'T', row: 0, col: 6, player: 'blue', power: 6 }, // C·ªçp
            { animal: 'D', row: 1, col: 1, player: 'blue', power: 4 }, // Ch√≥
            { animal: 'C', row: 1, col: 5, player: 'blue', power: 2 }, // M√®o
            { animal: 'R', row: 2, col: 0, player: 'blue', power: 1 }, // Chu·ªôt - b·∫Øt ƒë∆∞·ª£c Voi
            { animal: 'W', row: 2, col: 2, player: 'blue', power: 3 }, // S√≥i
            { animal: 'P', row: 2, col: 4, player: 'blue', power: 5 }, // B√°o
            { animal: 'E', row: 2, col: 6, player: 'blue', power: 8 }, // Voi - m·∫°nh nh·∫•t
            
            // Qu√¢n ƒë·ªè (player 1)
            { animal: 'E', row: 6, col: 0, player: 'red', power: 8 }, // Voi - m·∫°nh nh·∫•t
            { animal: 'P', row: 6, col: 2, player: 'red', power: 5 }, // B√°o
            { animal: 'W', row: 6, col: 4, player: 'red', power: 3 }, // S√≥i
            { animal: 'R', row: 6, col: 6, player: 'red', power: 1 }, // Chu·ªôt - b·∫Øt ƒë∆∞·ª£c Voi
            { animal: 'C', row: 7, col: 1, player: 'red', power: 2 }, // M√®o
            { animal: 'D', row: 7, col: 5, player: 'red', power: 4 }, // Ch√≥
            { animal: 'T', row: 8, col: 0, player: 'red', power: 6 }, // C·ªçp
            { animal: 'L', row: 8, col: 6, player: 'red', power: 7 }  // S∆∞ t·ª≠
        ];
        
        // T·∫°o c√°c qu√¢n c·ªù tr√™n b√†n c·ªù
        for (const pieceData of initialSetup) {
            const piece = document.createElement('div');
            piece.className = `animal-chess-piece ${pieceData.player}`;
            piece.dataset.animal = pieceData.animal;
            piece.dataset.player = pieceData.player;
            piece.dataset.row = pieceData.row;
            piece.dataset.col = pieceData.col;
            
            // Th√™m bi·ªÉu t∆∞·ª£ng con th√∫
            const animalIcon = document.createElement('div');
            animalIcon.className = 'animal-icon';
            animalIcon.textContent = this.animalIcons[pieceData.animal];
            animalIcon.title = `${pieceData.player === 'red' ? 'ƒê·ªè' : 'Xanh'} - ${this.animalNames[pieceData.animal]}`;
            piece.appendChild(animalIcon);
            
            // Th√™m k√Ω hi·ªáu ƒë·ªông v·∫≠t (ƒë·ªÉ d·ªÖ ph√¢n bi·ªát)
            const animalText = document.createElement('div');
            animalText.className = 'animal-text';
            animalText.textContent = pieceData.animal;
            piece.appendChild(animalText);
            
            // Th√™m nh√£n t√™n th√∫
            const label = document.createElement('div');
            label.className = 'piece-label';
            label.textContent = this.animalNames[pieceData.animal];
            piece.appendChild(label);
            
            piece.addEventListener('click', (e) => this.handlePieceClick(e));
            
            // ƒê·∫∑t qu√¢n c·ªù l√™n b√†n
            this.placePiece(piece, pieceData.row, pieceData.col);
            
            this.pieces.push(piece);
        }
        
        // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
        this.updateStatus();
    }
    
    // Ki·ªÉm tra xem √¥ c√≥ ph·∫£i l√† hang hay kh√¥ng
    isDen(row, col) {
        return (row === 0 && col === 3) || (row === 8 && col === 3);
    }
    
    // Ki·ªÉm tra xem √¥ c√≥ ph·∫£i l√† b·∫´y hay kh√¥ng
    isTrap(row, col) {
        const traps = [
            {row: 0, col: 2}, {row: 0, col: 4}, {row: 1, col: 3},
            {row: 8, col: 2}, {row: 8, col: 4}, {row: 7, col: 3}
        ];
        
        return traps.some(trap => trap.row === row && trap.col === col);
    }
    
    // L·∫•y ch·ªß s·ªü h·ªØu c·ªßa b·∫´y
    getTrapOwner(row, col) {
        if (!this.isTrap(row, col)) return null;
        return row < 3 ? 'blue' : 'red';
    }
    
    // Ki·ªÉm tra xem √¥ c√≥ ph·∫£i l√† n∆∞·ªõc hay kh√¥ng
    isWater(row, col) {
        return (row >= 3 && row <= 5) && (
            col === 1 || col === 2 || col === 4 || col === 5
        );
    }
    
    // X·ª≠ l√Ω khi click v√†o √¥ c·ªù
    handleCellClick(e) {
        if (!this.gameActive) return;
        
        const cell = e.currentTarget;
        const row = parseInt(cell.dataset.row);
        const col = parseInt(cell.dataset.col);
        
        // N·∫øu ƒë√£ ch·ªçn qu√¢n c·ªù v√† ƒë√¢y l√† n∆∞·ªõc ƒëi h·ª£p l·ªá
        if (this.selectedPiece && this.isValidMove(row, col)) {
            this.movePiece(this.selectedPiece, row, col);
            this.clearSelection();
            this.switchPlayer();
            this.updateStatus();
            return;
        }
        
        // N·∫øu kh√¥ng th√¨ x√≥a l·ª±a ch·ªçn
        this.clearSelection();
    }
    
    // X·ª≠ l√Ω khi click v√†o qu√¢n c·ªù
    handlePieceClick(e) {
        if (!this.gameActive) return;
        e.stopPropagation();
        
        const piece = e.currentTarget;
        const player = piece.dataset.player;
        
        // Ch·ªâ cho ph√©p ng∆∞·ªùi ch∆°i hi·ªán t·∫°i di chuy·ªÉn qu√¢n c·ªù c·ªßa h·ªç
        if (player !== this.currentPlayer) {
            this.clearSelection();
            return;
        }
        
        // N·∫øu qu√¢n c·ªù ƒë√£ ƒë∆∞·ª£c ch·ªçn, b·ªè ch·ªçn n√≥
        if (this.selectedPiece === piece) {
            this.clearSelection();
            return;
        }
        
        // Ch·ªçn qu√¢n c·ªù m·ªõi
        this.clearSelection();
        this.selectedPiece = piece;
        piece.classList.add('selected');
        
        // Hi·ªÉn th·ªã c√°c n∆∞·ªõc ƒëi c√≥ th·ªÉ
        this.highlightPossibleMoves(piece);
    }
    
    // Di chuy·ªÉn qu√¢n c·ªù
    movePiece(piece, toRow, toCol) {
        const fromRow = parseInt(piece.dataset.row);
        const fromCol = parseInt(piece.dataset.col);
        
        // Ki·ªÉm tra xem c√≥ qu√¢n c·ªù ƒë·ªëi ph∆∞∆°ng ·ªü √¥ ƒë√≠ch kh√¥ng
        const capturedPiece = this.getPieceAt(toRow, toCol);
        if (capturedPiece) {
            // B·∫Øt qu√¢n c·ªù ƒë·ªëi ph∆∞∆°ng
            this.capturePiece(capturedPiece);
        }
        
        // Di chuy·ªÉn qu√¢n c·ªù
        this.placePiece(piece, toRow, toCol);
        
        // Ki·ªÉm tra th·∫Øng/thua
        this.checkWinCondition();
    }
    
    // ƒê·∫∑t qu√¢n c·ªù l√™n b√†n c·ªù
    placePiece(piece, row, col) {
        const cell = this.getCellAt(row, col);
        if (!cell) return;
        
        // C·∫≠p nh·∫≠t dataset v√† v·ªã tr√≠
        piece.dataset.row = row;
        piece.dataset.col = col;
        
        // ƒê·∫∑t qu√¢n c·ªù v√†o √¥ m·ªõi
        cell.appendChild(piece);
    }
    
    // B·∫Øt qu√¢n c·ªù
    capturePiece(piece) {
        // X√≥a kh·ªèi b√†n c·ªù v√† m·∫£ng qu√¢n c·ªù
        piece.remove();
        this.pieces = this.pieces.filter(p => p !== piece);
    }
    
    // L·∫•y √¥ t·∫°i v·ªã tr√≠
    getCellAt(row, col) {
        return this.cells.find(cell => 
            parseInt(cell.dataset.row) === row && 
            parseInt(cell.dataset.col) === col
        );
    }
    
    // L·∫•y qu√¢n c·ªù t·∫°i v·ªã tr√≠
    getPieceAt(row, col) {
        return this.pieces.find(piece => 
            parseInt(piece.dataset.row) === row && 
            parseInt(piece.dataset.col) === col
        );
    }
    
    // Ki·ªÉm tra xem n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá kh√¥ng
    isValidMove(toRow, toCol) {
        if (!this.selectedPiece) return false;
        
        const fromRow = parseInt(this.selectedPiece.dataset.row);
        const fromCol = parseInt(this.selectedPiece.dataset.col);
        const animal = this.selectedPiece.dataset.animal;
        const player = this.selectedPiece.dataset.player;
        
        // Ki·ªÉm tra xem ƒë√≠ch ƒë·∫øn c√≥ qu√¢n c·ªù c√πng m√†u kh√¥ng
        const targetPiece = this.getPieceAt(toRow, toCol);
        if (targetPiece && targetPiece.dataset.player === player) {
            return false;
        }
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i l√† hang c·ªßa m√¨nh kh√¥ng
        if (this.isDen(toRow, toCol)) {
            if ((player === 'red' && toRow === 8) || (player === 'blue' && toRow === 0)) {
                return false;  // Kh√¥ng th·ªÉ v√†o hang c·ªßa m√¨nh
            }
        }
        
        // Ki·ªÉm tra h∆∞·ªõng di chuy·ªÉn v√† s·ªë √¥ di chuy·ªÉn
        const rowDiff = Math.abs(toRow - fromRow);
        const colDiff = Math.abs(toCol - fromCol);
        
        // Ch·ªâ c√≥ th·ªÉ di chuy·ªÉn theo chi·ªÅu ngang ho·∫∑c d·ªçc, kh√¥ng ƒëi ch√©o
        if (rowDiff > 0 && colDiff > 0) return false;
        
        // Ch·ªâ c√≥ th·ªÉ di chuy·ªÉn 1 √¥ m·ªói l·∫ßn (tr·ª´ khi l√† S∆∞ t·ª≠/C·ªçp nh·∫£y qua s√¥ng)
        if (rowDiff > 1 || colDiff > 1) {
            // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: S∆∞ t·ª≠ v√† C·ªçp c√≥ th·ªÉ nh·∫£y qua s√¥ng
            if ((animal === 'L' || animal === 'T') && this.isJumpingOverWater(fromRow, fromCol, toRow, toCol)) {
                return true;
            }
            return false;
        }
        
        // Chu·ªôt c√≥ th·ªÉ ƒëi v√†o n∆∞·ªõc, c√°c con kh√°c kh√¥ng th·ªÉ
        if (this.isWater(toRow, toCol) && animal !== 'R') {
            return false;
        }
        
        // Ki·ªÉm tra b·∫Øt qu√¢n
        if (targetPiece) {
            const targetAnimal = targetPiece.dataset.animal;
            const targetPlayer = targetPiece.dataset.player;
            
            // Kh√¥ng th·ªÉ b·∫Øt qu√¢n c√πng m√†u
            if (targetPlayer === player) return false;
            
            // Ki·ªÉm tra th·ª© b·∫≠c
            if (this.canCapture(animal, targetAnimal, fromRow, fromCol)) {
                return true;
            }
            
            return false;
        }
        
        // C√°c tr∆∞·ªùng h·ª£p di chuy·ªÉn th√¥ng th∆∞·ªùng
        return true;
    }
    
    // Ki·ªÉm tra xem con n√†y c√≥ th·ªÉ b·∫Øt con kia kh√¥ng
    canCapture(attackerAnimal, defenderAnimal, attackerRow, attackerCol) {
        // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: Chu·ªôt c√≥ th·ªÉ b·∫Øt Voi
        if (attackerAnimal === 'R' && defenderAnimal === 'E') {
            return true;
        }
        
        // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: Voi kh√¥ng th·ªÉ b·∫Øt Chu·ªôt
        if (attackerAnimal === 'E' && defenderAnimal === 'R') {
            return false;
        }
        
        // Ki·ªÉm tra xem ng∆∞·ªùi t·∫•n c√¥ng c√≥ n·∫±m trong b·∫´y kh√¥ng
        const attackerCell = this.getCellAt(attackerRow, attackerCol);
        if (attackerCell && attackerCell.classList.contains('trap')) {
            const trapOwner = attackerCell.dataset.owner;
            if (trapOwner !== this.currentPlayer) {
                // Qu√¢n trong b·∫´y c·ªßa ƒë·ªëi ph∆∞∆°ng kh√¥ng th·ªÉ b·∫Øt qu√¢n
                return false;
            }
        }
        
        // Ki·ªÉm tra th·ª© b·∫≠c th√¥ng th∆∞·ªùng
        return this.animalRanks[attackerAnimal] >= this.animalRanks[defenderAnimal];
    }
    
    // Ki·ªÉm tra xem S∆∞ t·ª≠ ho·∫∑c C·ªçp c√≥ th·ªÉ nh·∫£y qua s√¥ng kh√¥ng
    isJumpingOverWater(fromRow, fromCol, toRow, toCol) {
        // Ch·ªâ √°p d·ª•ng cho S∆∞ t·ª≠ v√† C·ªçp
        const piece = this.selectedPiece;
        if (!piece || (piece.dataset.animal !== 'L' && piece.dataset.animal !== 'T')) {
            return false;
        }
        
        // Ch·ªâ c√≥ th·ªÉ nh·∫£y theo chi·ªÅu d·ªçc ho·∫∑c ngang
        if (fromRow !== toRow && fromCol !== toCol) {
            return false;
        }
        
        // X√°c ƒë·ªãnh h∆∞·ªõng nh·∫£y
        let dr = 0, dc = 0;
        if (fromRow < toRow) dr = 1;
        else if (fromRow > toRow) dr = -1;
        else if (fromCol < toCol) dc = 1;
        else if (fromCol > toCol) dc = -1;
        
        // Ki·ªÉm tra xem c√≥ nh·∫£y qua n∆∞·ªõc kh√¥ng
        let row = fromRow + dr;
        let col = fromCol + dc;
        let waterCount = 0;
        let pieceInWater = false;
        
        while (row !== toRow || col !== toCol) {
            // N·∫øu l√† n∆∞·ªõc, tƒÉng s·ªë √¥ n∆∞·ªõc ƒëi qua
            if (this.isWater(row, col)) {
                waterCount++;
                // Ki·ªÉm tra xem c√≥ qu√¢n c·ªù n√†o trong n∆∞·ªõc kh√¥ng
                const pieceInWaterCell = this.getPieceAt(row, col);
                if (pieceInWaterCell) {
                    pieceInWater = true;
                    break;
                }
            } else {
                // N·∫øu g·∫∑p ƒë·∫•t li·ªÅn ·ªü gi·ªØa, kh√¥ng th·ªÉ nh·∫£y qua
                if (waterCount > 0) {
                    return false;
                }
            }
            
            row += dr;
            col += dc;
        }
        
        // N·∫øu c√≥ qu√¢n c·ªù n√†o trong n∆∞·ªõc, kh√¥ng th·ªÉ nh·∫£y qua
        if (pieceInWater) return false;
        
        // N·∫øu c√≥ nh·∫£y qua √≠t nh·∫•t m·ªôt √¥ n∆∞·ªõc v√† ƒë√≠ch ƒë·∫øn kh√¥ng ph·∫£i l√† n∆∞·ªõc
        return waterCount > 0 && !this.isWater(toRow, toCol);
    }
    
    // ƒê√°nh d·∫•u c√°c n∆∞·ªõc ƒëi c√≥ th·ªÉ
    highlightPossibleMoves(piece) {
        if (!piece) return;
        
        const row = parseInt(piece.dataset.row);
        const col = parseInt(piece.dataset.col);
        const animal = piece.dataset.animal;
        
        // X√≥a ƒë√°nh d·∫•u c≈©
        this.clearHighlights();
        
        // M·∫£ng h∆∞·ªõng di chuy·ªÉn: l√™n, ph·∫£i, xu·ªëng, tr√°i
        const directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];
        
        // Ki·ªÉm tra c√°c √¥ li·ªÅn k·ªÅ
        for (const [dr, dc] of directions) {
            const newRow = row + dr;
            const newCol = col + dc;
            
            // Ki·ªÉm tra √¥ c√≥ n·∫±m trong b√†n c·ªù kh√¥ng
            if (newRow >= 0 && newRow < 9 && newCol >= 0 && newCol < 7) {
                if (this.isValidMove(newRow, newCol)) {
                    const cell = this.getCellAt(newRow, newCol);
                    cell.classList.add('possible-move');
                    this.possibleMoves.push(cell);
                }
            }
        }
        
        // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát cho S∆∞ t·ª≠ v√† C·ªçp (nh·∫£y qua s√¥ng)
        if (animal === 'L' || animal === 'T') {
            // Ki·ªÉm tra c√°c h∆∞·ªõng xa h∆°n cho S∆∞ t·ª≠ v√† C·ªçp
            for (const [dr, dc] of directions) {
                // T√¨m √¥ sau khi nh·∫£y qua s√¥ng
                let newRow = row;
                let newCol = col;
                let waterCount = 0;
                let validJump = true;
                
                // Di chuy·ªÉn theo h∆∞·ªõng cho ƒë·∫øn khi g·∫∑p ƒë·∫•t li·ªÅn ho·∫∑c ra kh·ªèi b√†n c·ªù
                while (validJump) {
                    newRow += dr;
                    newCol += dc;
                    
                    // Ki·ªÉm tra √¥ c√≥ n·∫±m trong b√†n c·ªù kh√¥ng
                    if (newRow < 0 || newRow >= 9 || newCol < 0 || newCol >= 7) {
                        validJump = false;
                        break;
                    }
                    
                    // N·∫øu l√† n∆∞·ªõc, ti·∫øp t·ª•c di chuy·ªÉn
                    if (this.isWater(newRow, newCol)) {
                        // Ki·ªÉm tra xem c√≥ qu√¢n c·ªù n√†o trong n∆∞·ªõc kh√¥ng
                        const pieceInWater = this.getPieceAt(newRow, newCol);
                        if (pieceInWater) {
                            validJump = false;
                            break;
                        }
                        waterCount++;
                        continue;
                    }
                    
                    // ƒê√£ ƒë·∫øn ƒë·∫•t li·ªÅn
                    if (waterCount > 0) {
                        // Ki·ªÉm tra n∆∞·ªõc ƒëi h·ª£p l·ªá
                        if (this.isValidMove(newRow, newCol)) {
                            const cell = this.getCellAt(newRow, newCol);
                            cell.classList.add('possible-move');
                            this.possibleMoves.push(cell);
                        }
                    }
                    
                    break;
                }
            }
        }
    }
    
    // X√≥a ƒë√°nh d·∫•u c√°c n∆∞·ªõc ƒëi c√≥ th·ªÉ
    clearHighlights() {
        for (const cell of this.possibleMoves) {
            cell.classList.remove('possible-move');
        }
        this.possibleMoves = [];
    }
    
    // X√≥a l·ª±a ch·ªçn qu√¢n c·ªù
    clearSelection() {
        if (this.selectedPiece) {
            this.selectedPiece.classList.remove('selected');
            this.selectedPiece = null;
        }
        this.clearHighlights();
    }
    
    // ƒê·ªïi l∆∞·ª£t ng∆∞·ªùi ch∆°i
    switchPlayer() {
        this.currentPlayer = this.currentPlayer === 'red' ? 'blue' : 'red';
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã
    updateStatus() {
        if (!this.statusElement) return;
        
        if (!this.gameActive) {
            const winner = this.currentPlayer === 'red' ? 'Xanh' : 'ƒê·ªè';
            this.statusElement.textContent = `${winner} th·∫Øng!`;
            return;
        }
        
        const currentPlayerText = this.currentPlayer === 'red' ? 'ƒê·ªè' : 'Xanh';
        this.statusElement.textContent = `L∆∞·ª£t c·ªßa ${currentPlayerText}`;
    }
    
    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng
    checkWinCondition() {
        // Ki·ªÉm tra hang b·ªã chi·∫øm
        const blueDen = this.cells.find(cell => parseInt(cell.dataset.row) === 0 && parseInt(cell.dataset.col) === 3);
        const redDen = this.cells.find(cell => parseInt(cell.dataset.row) === 8 && parseInt(cell.dataset.col) === 3);
        
        const blueDenPiece = blueDen.querySelector('.animal-chess-piece');
        const redDenPiece = redDen.querySelector('.animal-chess-piece');
        
        // N·∫øu c√≥ qu√¢n ƒë·ªè trong hang xanh
        if (blueDenPiece && blueDenPiece.dataset.player === 'red') {
            this.endGame('red');
            return true;
        }
        
        // N·∫øu c√≥ qu√¢n xanh trong hang ƒë·ªè
        if (redDenPiece && redDenPiece.dataset.player === 'blue') {
            this.endGame('blue');
            return true;
        }
        
        // Ki·ªÉm tra n·∫øu m·ªôt ng∆∞·ªùi ch∆°i kh√¥ng c√≤n qu√¢n c·ªù
        const redPieces = this.pieces.filter(piece => piece.dataset.player === 'red');
        const bluePieces = this.pieces.filter(piece => piece.dataset.player === 'blue');
        
        if (redPieces.length === 0) {
            this.endGame('blue');
            return true;
        }
        
        if (bluePieces.length === 0) {
            this.endGame('red');
            return true;
        }
        
        return false;
    }
    
    // K·∫øt th√∫c tr√≤ ch∆°i
    endGame(winner) {
        this.gameActive = false;
        this.currentPlayer = winner;
        this.updateStatus();
    }
    
    // Kh·ªüi t·∫°o l·∫°i tr√≤ ch∆°i
    resetGame() {
        // X√≥a t·∫•t c·∫£ qu√¢n c·ªù kh·ªèi b√†n c·ªù
        for (const piece of this.pieces) {
            if (piece.parentElement) {
                piece.parentElement.removeChild(piece);
            }
        }
        
        // Kh·ªüi t·∫°o l·∫°i tr·∫°ng th√°i
        this.pieces = [];
        this.selectedPiece = null;
        this.possibleMoves = [];
        this.currentPlayer = 'red';
        this.gameActive = true;
        
        // Kh·ªüi t·∫°o l·∫°i qu√¢n c·ªù
        this.initializePieces();
    }
    
    // L·∫≠t b√†n c·ªù
    flipBoard() {
        this.isBoardFlipped = !this.isBoardFlipped;
        this.board.classList.toggle('flipped', this.isBoardFlipped);
        
        // L·∫≠t t·∫•t c·∫£ c√°c √¥ v√† qu√¢n c·ªù
        for (const cell of this.cells) {
            cell.classList.toggle('flipped', this.isBoardFlipped);
        }
        
        for (const piece of this.pieces) {
            piece.classList.toggle('flipped', this.isBoardFlipped);
        }
    }
    
    // Quay l·∫°i m√†n h√¨nh ch·ªçn game
    backToSelection() {
        // ·∫®n b√†n c·ªù
        const gameContainer = document.getElementById('animal-chess-game-container');
        if (gameContainer) {
            gameContainer.style.display = 'none';
        }
        
        // Hi·ªÉn th·ªã m√†n h√¨nh ch·ªçn game
        const gameTypeSelection = document.getElementById('game-type-selection');
        if (gameTypeSelection) {
            gameTypeSelection.style.display = 'block';
        }
    }
}

// T·∫°o ƒë·ªëi t∆∞·ª£ng tr√≤ ch∆°i khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', () => {
    // Kh·ªüi t·∫°o game logic
    window.animalChess = new AnimalChess();
    
    // C√°c n√∫t ch·ªçn ch·∫ø ƒë·ªô ch∆°i c·ªù th√∫
    const localGameBtn = document.getElementById('animal-local-game-btn');
    const aiGameBtn = document.getElementById('animal-ai-game-btn');
    const onlineGameBtn = document.getElementById('animal-online-game-btn');
    const backToGameTypesBtn = document.getElementById('animal-back-to-game-types-btn');
    const animalRulesToggle = document.getElementById('animal-rules-toggle');
    
    // Kh·ªüi t·∫°o c√°c s·ª± ki·ªán
    if (localGameBtn) {
        localGameBtn.addEventListener('click', () => {
            // Hi·ªÉn th·ªã container game c·ªù th√∫
            const animalChessSelection = document.getElementById('animal-chess-selection');
            const gameContainer = document.getElementById('animal-chess-game-container');
            
            if (animalChessSelection) animalChessSelection.style.display = 'none';
            if (gameContainer) {
                gameContainer.style.display = 'block';
                // Kh·ªüi t·∫°o b√†n c·ªù n·∫øu ch∆∞a c√≥
                if (!window.animalChess.board) {
                    window.animalChess.initBoard('animal-chess-game-container');
                }
            }
        });
    }
    
    if (aiGameBtn) {
        aiGameBtn.addEventListener('click', () => {
            // Hi·ªÉn th·ªã th√¥ng b√°o t√≠nh nƒÉng ƒëang ph√°t tri·ªÉn
            showNotification('Ch·∫ø ƒë·ªô ch∆°i v·ªõi m√°y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', true);
        });
    }
    
    if (onlineGameBtn) {
        onlineGameBtn.addEventListener('click', () => {
            // Hi·ªÉn th·ªã th√¥ng b√°o t√≠nh nƒÉng ƒëang ph√°t tri·ªÉn
            showNotification('Ch·∫ø ƒë·ªô ch∆°i tr·ª±c tuy·∫øn ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', true);
        });
    }
    
    // H√†m hi·ªÉn th·ªã th√¥ng b√°o
    function showNotification(message, isError = false) {
        let notification = document.querySelector('.notification');
        
        if (!notification) {
            notification = document.createElement('div');
            notification.className = 'notification';
            document.body.appendChild(notification);
        }
        
        notification.textContent = message;
        notification.className = 'notification';
        if (isError) {
            notification.classList.add('error');
        }
        
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }
}); 